ext.semanticVersion = SemanticVersion.from(version)
project.ext['release.useAutomaticVersion'] = 'true'
project.ext['release.releaseVersion'] = semanticVersion.releaseVersion()
project.ext['release.newVersion'] = semanticVersion.newVersion()

class SemanticVersion {
    int major
    int minor
    int patch
    String extension

    SemanticVersion newVersion(String releaseType = "patch") {
        def instance
        switch (releaseType) {
            case ~/^major$/:
                instance = new SemanticVersion(major: major + 1, minor: 0, patch: 0, extension: "SNAPSHOT")
                break;
            case ~/^minor$/:
                instance = new SemanticVersion(major: major, minor: minor + 1, patch: 0, extension: "SNAPSHOT")
                break
            case ~/^patch$/:
                instance = new SemanticVersion(major: major, minor: minor, patch: patch + 1, extension: "SNAPSHOT")
                break
            default:
                throw new GradleException("Cannot release version '${project.version.toString()}' with wrong '${releaseType}'!")
        }
        return instance
    }

    static SemanticVersion from(String versionString) {
        def splitted = versionString.split('[\\.-]')
        return new SemanticVersion(
                major: Integer.parseInt(splitted[0]),
                minor: Integer.parseInt(splitted[1]),
                patch: Integer.parseInt(splitted[2]),
                extension: splitted.length != 4 ?: splitted[3]
        )
    }

    SemanticVersion releaseVersion() {
        if (extension == null) {
            return this
        } else {
            return new SemanticVersion(major: major, minor: minor, patch: patch, extension: null)
        }
    }

    String toString() {
        "${major}.${minor}.${patch}${extension ? '-' + extension.toString() : ''}"
    }
}