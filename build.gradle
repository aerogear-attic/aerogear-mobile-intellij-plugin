plugins {
    id 'org.jetbrains.intellij' version '0.2.17'
}

group 'org.aerogear'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    ideaSdk
    bundle // dependencies bundled with the plugin
}


dependencies {
    ideaSdk fileTree(dir: 'lib/sdk/', include: ['*/lib/*.jar'])
    testCompile group: 'junit', name: 'junit', version: '4.12'

    testCompile 'org.testng:testng:6.8.21'
}

sourceSets {

    // Set test source
    test {
        java {
            java.srcDir 'src/test/java'
        }
    }
}

def IDEA_SDK_URL = 'https://download-cf.jetbrains.com/idea/ideaIC-2017.3.3.tar.gz'
def IDEA_SDK_NAME = 'IntelliJ IDEA Community Edition IC-173.4301.25'

test {
    // Avoid parallel execution, since the IntelliJ boilerplate is not up to that
    maxParallelForks = 1

    useTestNG()
}

task downloadIdeaSdk(type: Download) {
    sourceUrl = IDEA_SDK_URL
    target = file('lib/idea-sdk.tar.gz')
}

task extractIdeaSdk(type: Copy, dependsOn: [downloadIdeaSdk]) {
    def zipFile = file('lib/idea-sdk.tar.gz')
    def outputDir = file("lib/sdk")

    from tarTree(resources.gzip(zipFile))
    into outputDir
}

task dist(type: Zip, dependsOn: [jar, test]) {
    from configurations.bundle
    from jar.archivePath
    rename { f -> "lib/${f}" }
    into project.name
    baseName project.name
}

compileJava.dependsOn extractIdeaSdk

apply plugin: 'idea'

idea {
    project {
        languageLevel = '1.8'
        jdkName = IDEA_SDK_NAME

        ipr {
            withXml {
                it.node.find { node ->
                    node.@name == 'ProjectRootManager'
                }.'@project-jdk-type' = 'IDEA JDK'

                logger.warn "=" * 71
                logger.warn " Configured IDEA JDK '${jdkName}'."
                logger.warn " Make sure you have it configured IntelliJ before opening the project!"
                logger.warn "=" * 71
            }
        }
    }

    module {
        scopes.COMPILE.minus = [ configurations.ideaSdk ]

        iml {
            beforeMerged { module ->
                module.dependencies.clear()
            }
            withXml {
                it.node.@type = 'PLUGIN_MODULE'
                //  <component name="DevKit.ModuleBuildProperties" url="file://$MODULE_DIR$/src/main/resources/META-INF/plugin.xml" />
                def cmp = it.node.appendNode('component')
                cmp.@name = 'DevKit.ModuleBuildProperties'
                cmp.@url = 'file://$MODULE_DIR$/src/main/resources/META-INF/plugin.xml'
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}

// ========= Custom tasks ========= //

class Download extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        if (!target.parentFile.exists()) {
           target.parentFile.mkdirs()
        }
        logger.lifecycle "Downloading ${sourceUrl}, this might take a minute..."
        ant.get(src: sourceUrl, dest: target, skipexisting: 'true')
    }
}