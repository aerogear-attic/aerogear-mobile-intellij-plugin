package org.aerogear.plugin.intellij.mobile.wizard;

import com.intellij.ui.JBColor;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.BorderFactory;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.Border;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Insets;

import com.intellij.openapi.ui.ComboBox;


public class CreateClientForm extends JPanel {
    private JPanel clientPanel;
    private JLabel clientNameLabel;
    private JTextField clientNameTxtField;
    private JLabel clientTypeLabel;
    private JComboBox<String> clientTypeComboBox;
    private JLabel appIdLabel;
    private JTextField clientAppIdTxtField;
    private JLabel errorLabel;
    private JLabel errorMessage;
    private Border defaultClientNameBorder;
    private CreateClientFormInputs formInputs;


    CreateClientForm() {
        super();
        $$$setupUI$$$();
        this.setLayout(new FlowLayout(FlowLayout.LEFT));
        add(clientPanel);
    }

    private void createUIComponents() {
        clientTypeComboBox = new ComboBox<>(Constants.CLIENT_TYPES);
    }

    /**
     * Returns form as map <name, value>
     *
     * @return map
     */
    public CreateClientFormInputs getInputs() {
        CreateClientFormInputs formInputs = new CreateClientFormInputs();
        formInputs.setName(clientNameTxtField.getText());
        formInputs.setClientType(String.valueOf(clientTypeComboBox.getSelectedItem()));
        formInputs.setAppIdentifier(clientAppIdTxtField.getText());

        return formInputs;
    }

    /**
     * Set border RED on clientName input to indicate missing/invalid input.
     */
    public void invalidNameNotify() {
        errorLabel.setText("Error");
        errorMessage.setText("Client Name is required");
        defaultClientNameBorder = clientNameTxtField.getBorder();
        clientNameTxtField.setBorder(BorderFactory.createLineBorder(JBColor.RED, 1));
    }

    /**
     * Set default border on clientName input, to indicate valid input.
     */
    private void validNameNotify() {
        errorLabel.setText("");
        errorMessage.setText("");
        clientNameTxtField.setBorder(defaultClientNameBorder);
    }

    /**
     * Set border RED on clientName input to indicate missing/invalid input.
     */
    public void invalidAppIdNotify() {
        errorLabel.setText("Error");
        errorMessage.setText("app identifier, bundleID|packageName is required");
        defaultClientNameBorder = clientNameTxtField.getBorder();
        clientAppIdTxtField.setBorder(BorderFactory.createLineBorder(JBColor.RED, 1));
    }

    /**
     * Set default border on clientName input, to indicate valid input.
     */
    private void validAppIdNotify() {
        errorLabel.setText("");
        errorMessage.setText("");
        clientAppIdTxtField.setBorder(defaultClientNameBorder);
    }

    public void resetValidationNotifications() {
        validNameNotify();
        validAppIdNotify();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        clientPanel = new JPanel();
        clientPanel.setLayout(new GridLayoutManager(7, 2, new Insets(0, 0, 0, 0), -1, -1));
        clientNameLabel = new JLabel();
        clientNameLabel.setText("Client name");
        clientPanel.add(clientNameLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        clientNameTxtField = new JTextField();
        clientPanel.add(clientNameTxtField, new GridConstraints(0, 1, 3, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(300, -1), null, 0, false));
        clientTypeLabel = new JLabel();
        clientTypeLabel.setText("Client Type");
        clientPanel.add(clientTypeLabel, new GridConstraints(2, 0, 3, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        clientPanel.add(clientTypeComboBox, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        errorLabel = new JLabel();
        errorLabel.setText("");
        clientPanel.add(errorLabel, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        errorMessage = new JLabel();
        errorMessage.setText("");
        clientPanel.add(errorMessage, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        appIdLabel = new JLabel();
        appIdLabel.setText("App Identifier");
        clientPanel.add(appIdLabel, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        clientAppIdTxtField = new JTextField();
        clientPanel.add(clientAppIdTxtField, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return clientPanel;
    }
}
